                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Mar 12 12:44:10 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module parse
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _parse_num
                                     13 	.globl _uart_write_str
                                     14 	.globl _uart_write_ch
                                     15 	.globl _parse_millinum
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area INITIALIZED
                                     24 ;--------------------------------------------------------
                                     25 ; absolute external ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area DABS (ABS)
                                     28 ;--------------------------------------------------------
                                     29 ; global & static initialisations
                                     30 ;--------------------------------------------------------
                                     31 	.area HOME
                                     32 	.area GSINIT
                                     33 	.area GSFINAL
                                     34 	.area GSINIT
                                     35 ;--------------------------------------------------------
                                     36 ; Home
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area HOME
                                     40 ;--------------------------------------------------------
                                     41 ; code
                                     42 ;--------------------------------------------------------
                                     43 	.area CODE
                                     44 ;	parse.c: 22: uint16_t parse_num(uint8_t *s, uint8_t **stop, uint8_t *digits_seen)
                                     45 ;	-----------------------------------------
                                     46 ;	 function parse_num
                                     47 ;	-----------------------------------------
      000000                         48 _parse_num:
      000000 52 06            [ 2]   49 	sub	sp, #6
                                     50 ;	parse.c: 25: uint16_t num = 0;
      000002 5F               [ 1]   51 	clrw	x
      000003 1F 03            [ 2]   52 	ldw	(0x03, sp), x
                                     53 ;	parse.c: 27: *digits_seen = 0;
      000005 16 0D            [ 2]   54 	ldw	y, (0x0d, sp)
      000007 17 05            [ 2]   55 	ldw	(0x05, sp), y
      000009 1E 05            [ 2]   56 	ldw	x, (0x05, sp)
      00000B 7F               [ 1]   57 	clr	(x)
      00000C 16 09            [ 2]   58 	ldw	y, (0x09, sp)
      00000E                         59 00104$:
                                     60 ;	parse.c: 29: for (; *s >= '0' && *s <= '9'; s++) {
      00000E 90 F6            [ 1]   61 	ld	a, (y)
      000010 A1 30            [ 1]   62 	cp	a, #0x30
      000012 25 28            [ 1]   63 	jrc	00101$
      000014 A1 39            [ 1]   64 	cp	a, #0x39
      000016 22 24            [ 1]   65 	jrugt	00101$
                                     66 ;	parse.c: 30: digit = *s - '0';
      000018 A0 30            [ 1]   67 	sub	a, #0x30
                                     68 ;	parse.c: 31: num *= 10;
      00001A 88               [ 1]   69 	push	a
      00001B 90 89            [ 2]   70 	pushw	y
      00001D 1E 06            [ 2]   71 	ldw	x, (0x06, sp)
      00001F 89               [ 2]   72 	pushw	x
      000020 4B 0A            [ 1]   73 	push	#0x0a
      000022 4B 00            [ 1]   74 	push	#0x00
      000024 CDr00r00         [ 4]   75 	call	__mulint
      000027 5B 04            [ 2]   76 	addw	sp, #4
      000029 90 85            [ 2]   77 	popw	y
      00002B 84               [ 1]   78 	pop	a
      00002C 1F 01            [ 2]   79 	ldw	(0x01, sp), x
                                     80 ;	parse.c: 32: num += digit;
      00002E 5F               [ 1]   81 	clrw	x
      00002F 97               [ 1]   82 	ld	xl, a
      000030 72 FB 01         [ 2]   83 	addw	x, (0x01, sp)
      000033 1F 03            [ 2]   84 	ldw	(0x03, sp), x
                                     85 ;	parse.c: 33: (*digits_seen)++;
      000035 1E 05            [ 2]   86 	ldw	x, (0x05, sp)
      000037 7C               [ 1]   87 	inc	(x)
                                     88 ;	parse.c: 29: for (; *s >= '0' && *s <= '9'; s++) {
      000038 90 5C            [ 2]   89 	incw	y
      00003A 20 D2            [ 2]   90 	jra	00104$
      00003C                         91 00101$:
                                     92 ;	parse.c: 36: *stop = s;
      00003C 1E 0B            [ 2]   93 	ldw	x, (0x0b, sp)
      00003E FF               [ 2]   94 	ldw	(x), y
                                     95 ;	parse.c: 37: return num;
      00003F 1E 03            [ 2]   96 	ldw	x, (0x03, sp)
      000041 5B 06            [ 2]   97 	addw	sp, #6
      000043 81               [ 4]   98 	ret
                                     99 ;	parse.c: 40: uint16_t parse_millinum(uint8_t *s)
                                    100 ;	-----------------------------------------
                                    101 ;	 function parse_millinum
                                    102 ;	-----------------------------------------
      000044                        103 _parse_millinum:
      000044 52 1B            [ 2]  104 	sub	sp, #27
                                    105 ;	parse.c: 42: uint8_t *t = s;
      000046 16 1E            [ 2]  106 	ldw	y, (0x1e, sp)
      000048 17 0A            [ 2]  107 	ldw	(0x0a, sp), y
                                    108 ;	parse.c: 48: whole_digits = parse_num(s, &stop, &digits_seen);
      00004A 96               [ 1]  109 	ldw	x, sp
      00004B 5C               [ 2]  110 	incw	x
      00004C 1F 1A            [ 2]  111 	ldw	(0x1a, sp), x
      00004E 16 1A            [ 2]  112 	ldw	y, (0x1a, sp)
      000050 96               [ 1]  113 	ldw	x, sp
      000051 1C 00 08         [ 2]  114 	addw	x, #8
      000054 1F 18            [ 2]  115 	ldw	(0x18, sp), x
      000056 1E 18            [ 2]  116 	ldw	x, (0x18, sp)
      000058 90 89            [ 2]  117 	pushw	y
      00005A 89               [ 2]  118 	pushw	x
      00005B 1E 0E            [ 2]  119 	ldw	x, (0x0e, sp)
      00005D 89               [ 2]  120 	pushw	x
      00005E CDr00r00         [ 4]  121 	call	_parse_num
      000061 5B 06            [ 2]  122 	addw	sp, #6
      000063 1F 16            [ 2]  123 	ldw	(0x16, sp), x
                                    124 ;	parse.c: 49: if (whole_digits > 62 || digits_seen > 2)
      000065 1E 16            [ 2]  125 	ldw	x, (0x16, sp)
      000067 A3 00 3E         [ 2]  126 	cpw	x, #0x003e
      00006A 23 03            [ 2]  127 	jrule	00151$
      00006C CCr01r0D         [ 2]  128 	jp	00116$
      00006F                        129 00151$:
      00006F 7B 01            [ 1]  130 	ld	a, (0x01, sp)
      000071 A1 02            [ 1]  131 	cp	a, #0x02
      000073 23 03            [ 2]  132 	jrule	00152$
      000075 CCr01r0D         [ 2]  133 	jp	00116$
      000078                        134 00152$:
                                    135 ;	parse.c: 52: whole_digits *= 1000;
      000078 1E 16            [ 2]  136 	ldw	x, (0x16, sp)
      00007A 89               [ 2]  137 	pushw	x
      00007B 4B E8            [ 1]  138 	push	#0xe8
      00007D 4B 03            [ 1]  139 	push	#0x03
      00007F CDr00r00         [ 4]  140 	call	__mulint
      000082 5B 04            [ 2]  141 	addw	sp, #4
      000084 1F 02            [ 2]  142 	ldw	(0x02, sp), x
                                    143 ;	parse.c: 54: if (*stop == '\0')
      000086 1E 08            [ 2]  144 	ldw	x, (0x08, sp)
      000088 F6               [ 1]  145 	ld	a, (x)
      000089 4D               [ 1]  146 	tnz	a
      00008A 26 05            [ 1]  147 	jrne	00105$
                                    148 ;	parse.c: 55: return whole_digits;
      00008C 1E 02            [ 2]  149 	ldw	x, (0x02, sp)
      00008E CCr01r2D         [ 2]  150 	jp	00117$
      000091                        151 00105$:
                                    152 ;	parse.c: 57: if (*stop != '.')
      000091 A1 2E            [ 1]  153 	cp	a, #0x2e
      000093 26 78            [ 1]  154 	jrne	00116$
                                    155 ;	parse.c: 60: fraction_digits = parse_num(stop+1, &stop, &digits_seen);
      000095 16 1A            [ 2]  156 	ldw	y, (0x1a, sp)
      000097 17 14            [ 2]  157 	ldw	(0x14, sp), y
      000099 16 18            [ 2]  158 	ldw	y, (0x18, sp)
      00009B 5C               [ 2]  159 	incw	x
      00009C 7B 15            [ 1]  160 	ld	a, (0x15, sp)
      00009E 88               [ 1]  161 	push	a
      00009F 7B 15            [ 1]  162 	ld	a, (0x15, sp)
      0000A1 88               [ 1]  163 	push	a
      0000A2 90 89            [ 2]  164 	pushw	y
      0000A4 89               [ 2]  165 	pushw	x
      0000A5 CDr00r00         [ 4]  166 	call	_parse_num
      0000A8 5B 06            [ 2]  167 	addw	sp, #6
      0000AA 90 5F            [ 1]  168 	clrw	y
      0000AC 1F 06            [ 2]  169 	ldw	(0x06, sp), x
      0000AE 17 04            [ 2]  170 	ldw	(0x04, sp), y
                                    171 ;	parse.c: 61: if (fraction_digits > 999 || digits_seen > 3)
      0000B0 AE 03 E7         [ 2]  172 	ldw	x, #0x03e7
      0000B3 13 06            [ 2]  173 	cpw	x, (0x06, sp)
      0000B5 4F               [ 1]  174 	clr	a
      0000B6 12 05            [ 1]  175 	sbc	a, (0x05, sp)
      0000B8 4F               [ 1]  176 	clr	a
      0000B9 12 04            [ 1]  177 	sbc	a, (0x04, sp)
      0000BB 25 50            [ 1]  178 	jrc	00116$
      0000BD 7B 01            [ 1]  179 	ld	a, (0x01, sp)
      0000BF A1 03            [ 1]  180 	cp	a, #0x03
      0000C1 22 4A            [ 1]  181 	jrugt	00116$
                                    182 ;	parse.c: 64: if (digits_seen == 1)
      0000C3 7B 01            [ 1]  183 	ld	a, (0x01, sp)
      0000C5 A1 01            [ 1]  184 	cp	a, #0x01
      0000C7 26 17            [ 1]  185 	jrne	00114$
                                    186 ;	parse.c: 65: fraction_digits *= 100;
      0000C9 1E 06            [ 2]  187 	ldw	x, (0x06, sp)
      0000CB 89               [ 2]  188 	pushw	x
      0000CC 1E 06            [ 2]  189 	ldw	x, (0x06, sp)
      0000CE 89               [ 2]  190 	pushw	x
      0000CF 4B 64            [ 1]  191 	push	#0x64
      0000D1 5F               [ 1]  192 	clrw	x
      0000D2 89               [ 2]  193 	pushw	x
      0000D3 4B 00            [ 1]  194 	push	#0x00
      0000D5 CDr00r00         [ 4]  195 	call	__mullong
      0000D8 5B 08            [ 2]  196 	addw	sp, #8
      0000DA 1F 06            [ 2]  197 	ldw	(0x06, sp), x
      0000DC 17 04            [ 2]  198 	ldw	(0x04, sp), y
      0000DE 20 1B            [ 2]  199 	jra	00115$
      0000E0                        200 00114$:
                                    201 ;	parse.c: 66: else if (digits_seen == 2)
      0000E0 7B 01            [ 1]  202 	ld	a, (0x01, sp)
      0000E2 A1 02            [ 1]  203 	cp	a, #0x02
      0000E4 26 15            [ 1]  204 	jrne	00115$
                                    205 ;	parse.c: 67: fraction_digits *= 10;
      0000E6 1E 06            [ 2]  206 	ldw	x, (0x06, sp)
      0000E8 89               [ 2]  207 	pushw	x
      0000E9 1E 06            [ 2]  208 	ldw	x, (0x06, sp)
      0000EB 89               [ 2]  209 	pushw	x
      0000EC 4B 0A            [ 1]  210 	push	#0x0a
      0000EE 5F               [ 1]  211 	clrw	x
      0000EF 89               [ 2]  212 	pushw	x
      0000F0 4B 00            [ 1]  213 	push	#0x00
      0000F2 CDr00r00         [ 4]  214 	call	__mullong
      0000F5 5B 08            [ 2]  215 	addw	sp, #8
      0000F7 1F 06            [ 2]  216 	ldw	(0x06, sp), x
      0000F9 17 04            [ 2]  217 	ldw	(0x04, sp), y
      0000FB                        218 00115$:
                                    219 ;	parse.c: 69: return whole_digits + fraction_digits;
      0000FB 1E 02            [ 2]  220 	ldw	x, (0x02, sp)
      0000FD 4F               [ 1]  221 	clr	a
      0000FE 0F 10            [ 1]  222 	clr	(0x10, sp)
      000100 72 FB 06         [ 2]  223 	addw	x, (0x06, sp)
      000103 19 05            [ 1]  224 	adc	a, (0x05, sp)
      000105 6B 0D            [ 1]  225 	ld	(0x0d, sp), a
      000107 7B 10            [ 1]  226 	ld	a, (0x10, sp)
      000109 19 04            [ 1]  227 	adc	a, (0x04, sp)
      00010B 20 20            [ 2]  228 	jra	00117$
                                    229 ;	parse.c: 71: invalid_number:
      00010D                        230 00116$:
                                    231 ;	parse.c: 72: uart_write_str("INVALID NUMBER '");
      00010D AEr01r30         [ 2]  232 	ldw	x, #___str_0+0
      000110 89               [ 2]  233 	pushw	x
      000111 CDr00r00         [ 4]  234 	call	_uart_write_str
      000114 85               [ 2]  235 	popw	x
                                    236 ;	parse.c: 73: uart_write_str(t);
      000115 1E 0A            [ 2]  237 	ldw	x, (0x0a, sp)
      000117 89               [ 2]  238 	pushw	x
      000118 CDr00r00         [ 4]  239 	call	_uart_write_str
      00011B 85               [ 2]  240 	popw	x
                                    241 ;	parse.c: 74: uart_write_ch('\'');
      00011C 4B 27            [ 1]  242 	push	#0x27
      00011E CDr00r00         [ 4]  243 	call	_uart_write_ch
      000121 84               [ 1]  244 	pop	a
                                    245 ;	parse.c: 75: uart_write_str("\r\n");
      000122 AEr01r41         [ 2]  246 	ldw	x, #___str_1+0
      000125 89               [ 2]  247 	pushw	x
      000126 CDr00r00         [ 4]  248 	call	_uart_write_str
      000129 85               [ 2]  249 	popw	x
                                    250 ;	parse.c: 76: return 0xFFFF;
      00012A AE FF FF         [ 2]  251 	ldw	x, #0xffff
      00012D                        252 00117$:
      00012D 5B 1B            [ 2]  253 	addw	sp, #27
      00012F 81               [ 4]  254 	ret
                                    255 	.area CODE
      000130                        256 ___str_0:
      000130 49 4E 56 41 4C 49 44   257 	.ascii "INVALID NUMBER '"
             20 4E 55 4D 42 45 52
             20 27
      000140 00                     258 	.db 0x00
      000141                        259 ___str_1:
      000141 0D                     260 	.db 0x0D
      000142 0A                     261 	.db 0x0A
      000143 00                     262 	.db 0x00
                                    263 	.area INITIALIZER
                                    264 	.area CABS (ABS)
