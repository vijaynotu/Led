                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Mar 24 2016) (Linux)
                                      4 ; This file was generated Mon Mar 12 12:44:09 2018
                                      5 ;--------------------------------------------------------
                                      6 	.module display
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _display_char
                                     13 	.globl _memcpy
                                     14 	.globl _timer
                                     15 	.globl _pending_update
                                     16 	.globl _pending_display_data
                                     17 	.globl _display_data
                                     18 	.globl _display_idx
                                     19 	.globl _display_refresh
                                     20 	.globl _display_show
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DATA
      000000                         25 _display_idx::
      000000                         26 	.ds 1
      000001                         27 _display_data::
      000001                         28 	.ds 4
      000005                         29 _pending_display_data::
      000005                         30 	.ds 4
      000009                         31 _pending_update::
      000009                         32 	.ds 1
      00000A                         33 _timer::
      00000A                         34 	.ds 2
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area INITIALIZED
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DABS (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
                                     47 	.area GSINIT
                                     48 	.area GSFINAL
                                     49 	.area GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area CODE
                                     59 ;	display.c: 60: void display_refresh(void)
                                     60 ;	-----------------------------------------
                                     61 ;	 function display_refresh
                                     62 ;	-----------------------------------------
      000000                         63 _display_refresh:
      000000 52 07            [ 2]   64 	sub	sp, #7
                                     65 ;	display.c: 62: int i = display_idx++;
      000002 C6u00u00         [ 1]   66 	ld	a, _display_idx+0
      000005 97               [ 1]   67 	ld	xl, a
      000006 72 5Cu00u00      [ 1]   68 	inc	_display_idx+0
      00000A 4F               [ 1]   69 	clr	a
      00000B 95               [ 1]   70 	ld	xh, a
      00000C 1F 06            [ 2]   71 	ldw	(0x06, sp), x
                                     72 ;	display.c: 63: uint8_t bit = 8+(i*2);
      00000E 7B 07            [ 1]   73 	ld	a, (0x07, sp)
      000010 48               [ 1]   74 	sll	a
      000011 AB 08            [ 1]   75 	add	a, #0x08
                                     76 ;	display.c: 64: uint16_t digit = 0xFF00 ^ (3<<bit);
      000013 AE 00 03         [ 2]   77 	ldw	x, #0x0003
      000016 4D               [ 1]   78 	tnz	a
      000017 27 04            [ 1]   79 	jreq	00156$
      000019                         80 00155$:
      000019 58               [ 2]   81 	sllw	x
      00001A 4A               [ 1]   82 	dec	a
      00001B 26 FC            [ 1]   83 	jrne	00155$
      00001D                         84 00156$:
      00001D 9E               [ 1]   85 	ld	a, xh
      00001E 43               [ 1]   86 	cpl	a
      00001F 95               [ 1]   87 	ld	xh, a
      000020 1F 04            [ 2]   88 	ldw	(0x04, sp), x
                                     89 ;	display.c: 66: if (timer > 0)
      000022 CEu00u0A         [ 2]   90 	ldw	x, _timer+0
      000025 27 07            [ 1]   91 	jreq	00102$
                                     92 ;	display.c: 67: timer--;
      000027 CEu00u0A         [ 2]   93 	ldw	x, _timer+0
      00002A 5A               [ 2]   94 	decw	x
      00002B CFu00u0A         [ 2]   95 	ldw	_timer+0, x
      00002E                         96 00102$:
                                     97 ;	display.c: 68: if (pending_update && timer == 0) {
      00002E 72 5Du00u09      [ 1]   98 	tnz	_pending_update+0
      000032 27 22            [ 1]   99 	jreq	00104$
      000034 CEu00u0A         [ 2]  100 	ldw	x, _timer+0
      000037 26 1D            [ 1]  101 	jrne	00104$
                                    102 ;	display.c: 69: memcpy(display_data, pending_display_data, sizeof(display_data));
      000039 AEr00r05         [ 2]  103 	ldw	x, #_pending_display_data+0
      00003C 90 AEr00r01      [ 2]  104 	ldw	y, #_display_data+0
      000040 4B 04            [ 1]  105 	push	#0x04
      000042 4B 00            [ 1]  106 	push	#0x00
      000044 89               [ 2]  107 	pushw	x
      000045 90 89            [ 2]  108 	pushw	y
      000047 CDr00r00         [ 4]  109 	call	_memcpy
      00004A 5B 06            [ 2]  110 	addw	sp, #6
                                    111 ;	display.c: 70: pending_update = 0;
      00004C 72 5Fu00u09      [ 1]  112 	clr	_pending_update+0
                                    113 ;	display.c: 71: timer = 1500; // 1/2 of a second, approximately
      000050 AE 05 DC         [ 2]  114 	ldw	x, #0x05dc
      000053 CFu00u0A         [ 2]  115 	ldw	_timer+0, x
      000056                        116 00104$:
                                    117 ;	display.c: 74: display_word(digit | display_data[i]);
      000056 AEr00r01         [ 2]  118 	ldw	x, #_display_data+0
      000059 72 FB 06         [ 2]  119 	addw	x, (0x06, sp)
      00005C F6               [ 1]  120 	ld	a, (x)
      00005D 5F               [ 1]  121 	clrw	x
      00005E 97               [ 1]  122 	ld	xl, a
      00005F 1A 05            [ 1]  123 	or	a, (0x05, sp)
      000061 02               [ 1]  124 	rlwa	x
      000062 1A 04            [ 1]  125 	or	a, (0x04, sp)
      000064 95               [ 1]  126 	ld	xh, a
      000065 1F 02            [ 2]  127 	ldw	(0x02, sp), x
                                    128 ;	display.c: 51: for (i = 0; i < 16; i++) {
      000067 0F 01            [ 1]  129 	clr	(0x01, sp)
      000069                        130 00122$:
                                    131 ;	display.c: 52: uint8_t bit = word & 1;
      000069 7B 03            [ 1]  132 	ld	a, (0x03, sp)
      00006B A4 01            [ 1]  133 	and	a, #0x01
      00006D 90 97            [ 1]  134 	ld	yl, a
      00006F 4F               [ 1]  135 	clr	a
                                    136 ;	display.c: 53: word >>= 1;
      000070 1E 02            [ 2]  137 	ldw	x, (0x02, sp)
      000072 54               [ 2]  138 	srlw	x
      000073 1F 02            [ 2]  139 	ldw	(0x02, sp), x
                                    140 ;	display.c: 54: SET_DATA(bit);
      000075 AE 50 0F         [ 2]  141 	ldw	x, #0x500f
      000078 F6               [ 1]  142 	ld	a, (x)
      000079 61               [ 1]  143 	exg	a, yl
      00007A 4D               [ 1]  144 	tnz	a
      00007B 61               [ 1]  145 	exg	a, yl
      00007C 27 08            [ 1]  146 	jreq	00109$
      00007E AA 10            [ 1]  147 	or	a, #0x10
      000080 AE 50 0F         [ 2]  148 	ldw	x, #0x500f
      000083 F7               [ 1]  149 	ld	(x), a
      000084 20 06            [ 2]  150 	jra	00112$
      000086                        151 00109$:
      000086 A4 EF            [ 1]  152 	and	a, #0xef
      000088 AE 50 0F         [ 2]  153 	ldw	x, #0x500f
      00008B F7               [ 1]  154 	ld	(x), a
      00008C                        155 00112$:
                                    156 ;	display.c: 55: PULSE_CLOCK();
      00008C AE 50 00         [ 2]  157 	ldw	x, #0x5000
      00008F F6               [ 1]  158 	ld	a, (x)
      000090 AA 02            [ 1]  159 	or	a, #0x02
      000092 F7               [ 1]  160 	ld	(x), a
      000093 AE 50 00         [ 2]  161 	ldw	x, #0x5000
      000096 F6               [ 1]  162 	ld	a, (x)
      000097 A4 FD            [ 1]  163 	and	a, #0xfd
      000099 F7               [ 1]  164 	ld	(x), a
                                    165 ;	display.c: 51: for (i = 0; i < 16; i++) {
      00009A 0C 01            [ 1]  166 	inc	(0x01, sp)
      00009C 7B 01            [ 1]  167 	ld	a, (0x01, sp)
      00009E A1 10            [ 1]  168 	cp	a, #0x10
      0000A0 25 C7            [ 1]  169 	jrc	00122$
                                    170 ;	display.c: 57: SAVE_DATA();
      0000A2 AE 50 00         [ 2]  171 	ldw	x, #0x5000
      0000A5 F6               [ 1]  172 	ld	a, (x)
      0000A6 A4 FB            [ 1]  173 	and	a, #0xfb
      0000A8 F7               [ 1]  174 	ld	(x), a
      0000A9 AE 50 00         [ 2]  175 	ldw	x, #0x5000
      0000AC F6               [ 1]  176 	ld	a, (x)
      0000AD AA 04            [ 1]  177 	or	a, #0x04
      0000AF F7               [ 1]  178 	ld	(x), a
                                    179 ;	display.c: 76: if (display_idx == 4)
      0000B0 C6u00u00         [ 1]  180 	ld	a, _display_idx+0
      0000B3 A1 04            [ 1]  181 	cp	a, #0x04
      0000B5 26 04            [ 1]  182 	jrne	00124$
                                    183 ;	display.c: 77: display_idx = 0;
      0000B7 72 5Fu00u00      [ 1]  184 	clr	_display_idx+0
      0000BB                        185 00124$:
      0000BB 5B 07            [ 2]  186 	addw	sp, #7
      0000BD 81               [ 4]  187 	ret
                                    188 ;	display.c: 80: uint8_t display_char(uint8_t ch, uint8_t dot)
                                    189 ;	-----------------------------------------
                                    190 ;	 function display_char
                                    191 ;	-----------------------------------------
      0000BE                        192 _display_char:
      0000BE 52 04            [ 2]  193 	sub	sp, #4
                                    194 ;	display.c: 82: if (dot)
      0000C0 0D 08            [ 1]  195 	tnz	(0x08, sp)
      0000C2 27 04            [ 1]  196 	jreq	00102$
                                    197 ;	display.c: 83: dot = 1;
      0000C4 A6 01            [ 1]  198 	ld	a, #0x01
      0000C6 6B 08            [ 1]  199 	ld	(0x08, sp), a
      0000C8                        200 00102$:
                                    201 ;	display.c: 84: if (ch >= '0' && ch <= '9')
      0000C8 7B 07            [ 1]  202 	ld	a, (0x07, sp)
      0000CA A1 30            [ 1]  203 	cp	a, #0x30
      0000CC 25 2A            [ 1]  204 	jrc	00104$
      0000CE 7B 07            [ 1]  205 	ld	a, (0x07, sp)
      0000D0 A1 39            [ 1]  206 	cp	a, #0x39
      0000D2 22 24            [ 1]  207 	jrugt	00104$
                                    208 ;	display.c: 85: return display_number[ch-'0'] | dot;
      0000D4 AEr01r49         [ 2]  209 	ldw	x, #_display_number+0
      0000D7 1F 03            [ 2]  210 	ldw	(0x03, sp), x
      0000D9 7B 07            [ 1]  211 	ld	a, (0x07, sp)
      0000DB A0 30            [ 1]  212 	sub	a, #0x30
      0000DD 97               [ 1]  213 	ld	xl, a
      0000DE 49               [ 1]  214 	rlc	a
      0000DF 4F               [ 1]  215 	clr	a
      0000E0 A2 00            [ 1]  216 	sbc	a, #0x00
      0000E2 95               [ 1]  217 	ld	xh, a
      0000E3 58               [ 2]  218 	sllw	x
      0000E4 72 FB 03         [ 2]  219 	addw	x, (0x03, sp)
      0000E7 FE               [ 2]  220 	ldw	x, (x)
      0000E8 7B 08            [ 1]  221 	ld	a, (0x08, sp)
      0000EA 0F 01            [ 1]  222 	clr	(0x01, sp)
      0000EC 89               [ 2]  223 	pushw	x
      0000ED 1A 02            [ 1]  224 	or	a, (2, sp)
      0000EF 85               [ 2]  225 	popw	x
      0000F0 88               [ 1]  226 	push	a
      0000F1 9E               [ 1]  227 	ld	a, xh
      0000F2 1A 02            [ 1]  228 	or	a, (0x02, sp)
      0000F4 95               [ 1]  229 	ld	xh, a
      0000F5 84               [ 1]  230 	pop	a
      0000F6 20 02            [ 2]  231 	jra	00106$
      0000F8                        232 00104$:
                                    233 ;	display.c: 86: return dot;
      0000F8 7B 08            [ 1]  234 	ld	a, (0x08, sp)
      0000FA                        235 00106$:
      0000FA 5B 04            [ 2]  236 	addw	sp, #4
      0000FC 81               [ 4]  237 	ret
                                    238 ;	display.c: 89: void display_show(uint8_t ch1, uint8_t dot1, uint8_t ch2, uint8_t dot2, uint8_t ch3, uint8_t dot3, uint8_t ch4, uint8_t dot4)
                                    239 ;	-----------------------------------------
                                    240 ;	 function display_show
                                    241 ;	-----------------------------------------
      0000FD                        242 _display_show:
      0000FD 89               [ 2]  243 	pushw	x
                                    244 ;	display.c: 91: pending_display_data[3] = display_char(ch1, dot1);
      0000FE AEr00r05         [ 2]  245 	ldw	x, #_pending_display_data+0
      000101 1F 01            [ 2]  246 	ldw	(0x01, sp), x
      000103 1E 01            [ 2]  247 	ldw	x, (0x01, sp)
      000105 1C 00 03         [ 2]  248 	addw	x, #0x0003
      000108 89               [ 2]  249 	pushw	x
      000109 7B 08            [ 1]  250 	ld	a, (0x08, sp)
      00010B 88               [ 1]  251 	push	a
      00010C 7B 08            [ 1]  252 	ld	a, (0x08, sp)
      00010E 88               [ 1]  253 	push	a
      00010F CDr00rBE         [ 4]  254 	call	_display_char
      000112 5B 04            [ 2]  255 	addw	sp, #4
      000114 F7               [ 1]  256 	ld	(x), a
                                    257 ;	display.c: 92: pending_display_data[2] = display_char(ch2, dot2);
      000115 1E 01            [ 2]  258 	ldw	x, (0x01, sp)
      000117 5C               [ 2]  259 	incw	x
      000118 5C               [ 2]  260 	incw	x
      000119 89               [ 2]  261 	pushw	x
      00011A 7B 0A            [ 1]  262 	ld	a, (0x0a, sp)
      00011C 88               [ 1]  263 	push	a
      00011D 7B 0A            [ 1]  264 	ld	a, (0x0a, sp)
      00011F 88               [ 1]  265 	push	a
      000120 CDr00rBE         [ 4]  266 	call	_display_char
      000123 5B 04            [ 2]  267 	addw	sp, #4
      000125 F7               [ 1]  268 	ld	(x), a
                                    269 ;	display.c: 93: pending_display_data[1] = display_char(ch3, dot3);
      000126 1E 01            [ 2]  270 	ldw	x, (0x01, sp)
      000128 5C               [ 2]  271 	incw	x
      000129 89               [ 2]  272 	pushw	x
      00012A 7B 0C            [ 1]  273 	ld	a, (0x0c, sp)
      00012C 88               [ 1]  274 	push	a
      00012D 7B 0C            [ 1]  275 	ld	a, (0x0c, sp)
      00012F 88               [ 1]  276 	push	a
      000130 CDr00rBE         [ 4]  277 	call	_display_char
      000133 5B 04            [ 2]  278 	addw	sp, #4
      000135 F7               [ 1]  279 	ld	(x), a
                                    280 ;	display.c: 94: pending_display_data[0] = display_char(ch4, dot4);
      000136 7B 0C            [ 1]  281 	ld	a, (0x0c, sp)
      000138 88               [ 1]  282 	push	a
      000139 7B 0C            [ 1]  283 	ld	a, (0x0c, sp)
      00013B 88               [ 1]  284 	push	a
      00013C CDr00rBE         [ 4]  285 	call	_display_char
      00013F 85               [ 2]  286 	popw	x
      000140 1E 01            [ 2]  287 	ldw	x, (0x01, sp)
      000142 F7               [ 1]  288 	ld	(x), a
                                    289 ;	display.c: 95: pending_update = 1;
      000143 35 01u00u09      [ 1]  290 	mov	_pending_update+0, #0x01
      000147 85               [ 2]  291 	popw	x
      000148 81               [ 4]  292 	ret
                                    293 	.area CODE
      000149                        294 _display_number:
      000149 00 FC                  295 	.dw #0x00FC
      00014B 00 60                  296 	.dw #0x0060
      00014D 00 DA                  297 	.dw #0x00DA
      00014F 00 F2                  298 	.dw #0x00F2
      000151 00 66                  299 	.dw #0x0066
      000153 00 B6                  300 	.dw #0x00B6
      000155 00 BE                  301 	.dw #0x00BE
      000157 00 E0                  302 	.dw #0x00E0
      000159 00 FE                  303 	.dw #0x00FE
      00015B 00 F6                  304 	.dw #0x00F6
                                    305 	.area INITIALIZER
                                    306 	.area CABS (ABS)
